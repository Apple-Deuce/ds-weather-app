import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import { BsGrid3X3GapFill } from 'react-icons/bs'
import axios from 'axios'
import {useState} from 'react'
import {BsSearch} from 'react-icons/bs'
import Weather from '@/components/Weather'
import Spinner from '@/components/Spinner'


export default function Home() {

  function parseCoordinates(input) {
    const regex = /(-?\d+(\.\d+)?)[\s°]*([NS])?,?\s*(-?\d+(\.\d+)?)[\s°]*([EW])?/i;
    const match = input.match(regex);

    if (!match) {
      throw new Error("Invalid coordinates format.");
    }

    const lat = parseFloat(match[1]) * (match[3].toUpperCase() === "S" ? -1 : 1);
    const lon = parseFloat(match[4]) * (match[6].toUpperCase() === "W" ? -1 : 1);

    return `${lat},${lon}`;
  }

  const[location, setLocation] = useState('')
  const [weather, setWeather] = useState({})
  const [loading, setLoading] = useState(false)

  const url = `https://api.weather.gov/points/${location}`

  const fetchWeather = async (e) => {
    e.preventDefault()
    setLoading(true)

    try {
      const parsedLocation = parseCoordinates(location);
    const initialUrl = `https://api.weather.gov/points/${parsedLocation}`
      const initialResponse = await axios.get(initialUrl)
      const forecastUrl = initialResponse.data.properties.forecast
      const forecastResponse = await axios.get(forecastUrl)

      setWeather(forecastResponse.data)
      //console.log(forecastResponse.data)
    } catch (error) {
      console.error(`Error fetching weather data: ${error}`)
    }

    setLocation('')
    setLoading(false)
  }

  if(loading) {
    return <Spinner/>
  } else {
    return (
      <div className="relative min-h-screen">

{/* Background Image */}

        <Image
          className="object-cover"
          src="https://images.unsplash.com/photo-1496450681664-3df85efbd29f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1740&q=80"
          layout="fill"
          alt="bg"
        />
        <Head>
          <title>Dustin Long Weather App</title>
          <meta name="description" content="Generated by create next app"/>
          <link rel="icon" href='/favicon.ico'/>
        </Head>

        {/* Overlay */}

  <div className='absolute top-0 left-0 right-0 bottom-0 bg-black/30 z-[1]'/>

        {/* Search */}

        <div className='relative flex justify-between items-center max-w-[400px] w-full m-auto pt-4 text-white z-10'>
          <form onSubmit={fetchWeather} className='flex justify-between items-center w-full m-auto p-3 bg-transparent border border-slate-400 rounded-xl'>
            <div>
              <input
              onChange={(e)=> setLocation(e.target.value)}
              className='bg-transparent border-none text-white focus:outline-none text-xl font-medium placeholder:text-slate-800/50'
              type="text"
              placeholder='Enter Coordinates'/>
            </div>
            <button onClick={fetchWeather}>
              <BsSearch size={20}/>
              </button>
          </form>
        </div>

        {/* Weather Cards */}

        {weather.properties && <Weather data={weather} />}
      </div>
      )
  }
}